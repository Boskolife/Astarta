#!/usr/bin/env python3
"""
Figma SVG Downloader
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤—Å–µ—Ö SVG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ Figma –¥–∏–∑–∞–π–Ω–∞
"""

import requests
import json
import os
import re
import time
from urllib.parse import urlparse, parse_qs
from typing import List, Dict, Optional
import argparse


class FigmaSVGDownloader:
    def __init__(self, access_token: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ Figma
        
        Args:
            access_token: –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ Figma
        """
        self.access_token = access_token
        self.base_url = "https://api.figma.com/v1"
        self.headers = {
            "X-Figma-Token": access_token,
            "Content-Type": "application/json"
        }
        
    def extract_file_key_and_node_id(self, figma_url: str) -> tuple:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç file_key –∏ node_id –∏–∑ URL Figma
        
        Args:
            figma_url: URL –¥–∏–∑–∞–π–Ω–∞ Figma
            
        Returns:
            tuple: (file_key, node_id)
        """
        # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è file_key –∏–∑ URL
        file_key_pattern = r'/design/([a-zA-Z0-9]+)'
        file_key_match = re.search(file_key_pattern, figma_url)
        
        if not file_key_match:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å file_key –∏–∑ URL")
            
        file_key = file_key_match.group(1)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º node_id –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ URL
        parsed_url = urlparse(figma_url)
        query_params = parse_qs(parsed_url.query)
        
        node_id = query_params.get('node-id', [None])[0]
        if node_id:
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            node_id = node_id.replace('2035-', '')
        
        return file_key, node_id
    
    def get_file_info(self, file_key: str) -> Dict:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ Figma
        
        Args:
            file_key: –ö–ª—é—á —Ñ–∞–π–ª–∞ Figma
            
        Returns:
            Dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
        """
        url = f"{self.base_url}/files/{file_key}"
        response = requests.get(url, headers=self.headers)
        
        if response.status_code != 200:
            raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ: {response.status_code} - {response.text}")
            
        return response.json()
    
    def get_node_images(self, file_key: str, node_id: str = None) -> Dict:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö –≤ —É–∑–ª–µ
        
        Args:
            file_key: –ö–ª—é—á —Ñ–∞–π–ª–∞ Figma
            node_id: ID —É–∑–ª–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            Dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö
        """
        url = f"{self.base_url}/images/{file_key}"
        params = {
            "format": "svg",
            "scale": 1
        }
        
        if node_id:
            params["ids"] = node_id
            
        response = requests.get(url, headers=self.headers, params=params)
        
        if response.status_code != 200:
            raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {response.status_code} - {response.text}")
            
        return response.json()
    
    def find_all_image_nodes(self, document: Dict, image_nodes: List[str] = None) -> List[str]:
        """
        –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —É–∑–ª—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ
        
        Args:
            document: –î–æ–∫—É–º–µ–Ω—Ç Figma
            image_nodes: –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —É–∑–ª–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
            
        Returns:
            List[str]: –°–ø–∏—Å–æ–∫ ID —É–∑–ª–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        """
        if image_nodes is None:
            image_nodes = []
            
        if not isinstance(document, dict):
            return image_nodes
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É–∑–µ–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        if document.get("type") in ["RECTANGLE", "ELLIPSE", "POLYGON", "STAR", "VECTOR", "FRAME", "COMPONENT", "INSTANCE"]:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ fill —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
            fills = document.get("fills", [])
            for fill in fills:
                if fill.get("type") == "IMAGE":
                    node_id = document.get("id")
                    if node_id and node_id not in image_nodes:
                        image_nodes.append(node_id)
        
        # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ö–æ–¥–∏–º –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        children = document.get("children", [])
        for child in children:
            self.find_all_image_nodes(child, image_nodes)
            
        return image_nodes
    
    def download_image(self, url: str, filename: str, output_dir: str) -> bool:
        """
        –°–∫–∞—á–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL
        
        Args:
            url: URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            filename: –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            output_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ
        """
        try:
            response = requests.get(url, timeout=30)
            if response.status_code == 200:
                filepath = os.path.join(output_dir, filename)
                with open(filepath, 'wb') as f:
                    f.write(response.content)
                print(f"‚úì –°–∫–∞—á–∞–Ω–æ: {filename}")
                return True
            else:
                print(f"‚úó –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è {filename}: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ {filename}: {str(e)}")
            return False
    
    def download_all_svgs(self, figma_url: str, output_dir: str = "figma_svgs") -> None:
        """
        –°–∫–∞—á–∏–≤–∞–µ—Ç –≤—Å–µ SVG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ Figma –¥–∏–∑–∞–π–Ω–∞
        
        Args:
            figma_url: URL –¥–∏–∑–∞–π–Ω–∞ Figma
            output_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        """
        print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ SVG –∏–∑ Figma...")
        print(f"üìÅ URL: {figma_url}")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        os.makedirs(output_dir, exist_ok=True)
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º file_key –∏ node_id
            file_key, node_id = self.extract_file_key_and_node_id(figma_url)
            print(f"üîë File Key: {file_key}")
            if node_id:
                print(f"üéØ Node ID: {node_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            print("üìã –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ...")
            file_info = self.get_file_info(file_key)
            
            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —É–∑–ª—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
            print("üîç –ò—â–µ–º —É–∑–ª—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏...")
            all_image_nodes = []
            
            # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π node_id, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            if node_id:
                all_image_nodes = [node_id]
            else:
                # –ò—â–µ–º –≤–æ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞
                pages = file_info.get("document", {}).get("children", [])
                for page in pages:
                    self.find_all_image_nodes(page, all_image_nodes)
            
            if not all_image_nodes:
                print("‚ö†Ô∏è  –£–∑–ª—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(all_image_nodes)} —É–∑–ª–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏")
            
            # –ü–æ–ª—É—á–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            print("üñºÔ∏è  –ü–æ–ª—É—á–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
            image_info = self.get_node_images(file_key, ",".join(all_image_nodes))
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            print("‚¨áÔ∏è  –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ...")
            downloaded_count = 0
            
            for node_id, image_data in image_info.get("images", {}).items():
                if image_data:
                    filename = f"image_{node_id}.svg"
                    if self.download_image(image_data, filename, output_dir):
                        downloaded_count += 1
                    time.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            
            print(f"‚úÖ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –°–∫–∞—á–∞–Ω–æ {downloaded_count} —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é '{output_dir}'")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


def main():
    parser = argparse.ArgumentParser(description="–°–∫–∞—á–∏–≤–∞–Ω–∏–µ SVG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ Figma")
    parser.add_argument("url", help="URL –¥–∏–∑–∞–π–Ω–∞ Figma")
    parser.add_argument("--token", help="–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ Figma")
    parser.add_argument("--output", "-o", default="figma_svgs", help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: figma_svgs)")
    
    args = parser.parse_args()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    access_token = args.token or os.getenv("FIGMA_ACCESS_TOKEN")
    
    if not access_token:
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ–æ–±—Ö–æ–¥–∏–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ Figma")
        print("üìù –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –Ω–∞ https://www.figma.com/developers/api#access-tokens")
        print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: --token YOUR_TOKEN –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é FIGMA_ACCESS_TOKEN")
        return
    
    downloader = FigmaSVGDownloader(access_token)
    downloader.download_all_svgs(args.url, args.output)


if __name__ == "__main__":
    main()