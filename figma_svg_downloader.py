#!/usr/bin/env python3
"""
Figma SVG Downloader
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤—Å–µ—Ö SVG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –¥–∏–∑–∞–π–Ω–∞ Figma
"""

import requests
import json
import os
import re
from urllib.parse import urlparse, parse_qs
import time
from pathlib import Path

class FigmaSVGDownloader:
    def __init__(self, access_token):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ Figma SVG
        
        Args:
            access_token (str): –¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –∫ Figma API
        """
        self.access_token = access_token
        self.base_url = "https://api.figma.com/v1"
        self.headers = {
            "X-Figma-Token": access_token,
            "Content-Type": "application/json"
        }
    
    def extract_file_key(self, figma_url):
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç file key –∏–∑ URL Figma
        
        Args:
            figma_url (str): URL –¥–∏–∑–∞–π–Ω–∞ Figma
            
        Returns:
            str: File key
        """
        # URL pattern: https://www.figma.com/design/FILE_KEY/PROJECT_NAME?...
        pattern = r"figma\.com/design/([a-zA-Z0-9]+)/"
        match = re.search(pattern, figma_url)
        if match:
            return match.group(1)
        else:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å file key –∏–∑ URL")
    
    def get_file_info(self, file_key):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ Figma
        
        Args:
            file_key (str): –ö–ª—é—á —Ñ–∞–π–ª–∞ Figma
            
        Returns:
            dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
        """
        url = f"{self.base_url}/files/{file_key}"
        response = requests.get(url, headers=self.headers)
        
        if response.status_code == 200:
            return response.json()
        else:
            raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ: {response.status_code} - {response.text}")
    
    def find_all_nodes(self, node, node_list=None):
        """
        –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —É–∑–ª—ã –≤ –¥–µ—Ä–µ–≤–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        
        Args:
            node (dict): –£–∑–µ–ª –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
            node_list (list): –°–ø–∏—Å–æ–∫ —É–∑–ª–æ–≤ –¥–ª—è —Å–±–æ—Ä–∞
            
        Returns:
            list: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É–∑–ª–æ–≤
        """
        if node_list is None:
            node_list = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —É–∑–µ–ª –µ—Å–ª–∏ –æ–Ω —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã–π
        if self.is_exportable_node(node):
            node_list.append({
                "id": node["id"],
                "name": node.get("name", "unnamed"),
                "type": node["type"]
            })
        
        # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ö–æ–¥–∏–º –¥–æ—á–µ—Ä–Ω–∏–µ —É–∑–ª—ã
        if "children" in node:
            for child in node["children"]:
                self.find_all_nodes(child, node_list)
        
        return node_list
    
    def is_exportable_node(self, node):
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —É–∑–µ–ª –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        
        Args:
            node (dict): –£–∑–µ–ª –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ —É–∑–µ–ª –º–æ–∂–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
        """
        # –¢–∏–ø—ã —É–∑–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        exportable_types = [
            "VECTOR", "RECTANGLE", "ELLIPSE", "POLYGON", "STAR", 
            "LINE", "FRAME", "GROUP", "COMPONENT", "INSTANCE",
            "BOOLEAN_OPERATION", "REGULAR_POLYGON"
        ]
        
        node_type = node.get("type", "")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —É–∑–ª–∞
        if node_type in exportable_types:
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if "exportSettings" in node and len(node["exportSettings"]) > 0:
            return True
            
        return False
    
    def get_export_urls(self, file_key, node_ids, format="svg"):
        """
        –ü–æ–ª—É—á–∞–µ—Ç URL –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        
        Args:
            file_key (str): –ö–ª—é—á —Ñ–∞–π–ª–∞ Figma
            node_ids (list): –°–ø–∏—Å–æ–∫ ID —É–∑–ª–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
            format (str): –§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ (svg, png, jpg)
            
        Returns:
            dict: –°–ª–æ–≤–∞—Ä—å —Å URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        """
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –±–∞—Ç—á–∏ –ø–æ 100 —É–∑–ª–æ–≤ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ API)
        batch_size = 100
        all_export_urls = {}
        
        for i in range(0, len(node_ids), batch_size):
            batch = node_ids[i:i + batch_size]
            ids_param = ",".join(batch)
            
            url = f"{self.base_url}/images/{file_key}"
            params = {
                "ids": ids_param,
                "format": format,
                "scale": 1
            }
            
            response = requests.get(url, headers=self.headers, params=params)
            
            if response.status_code == 200:
                data = response.json()
                if "images" in data:
                    all_export_urls.update(data["images"])
                    print(f"–ü–æ–ª—É—á–µ–Ω—ã URL –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ {len(batch)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
                else:
                    print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ –ø–æ–ª—É—á–µ–Ω—ã URL –¥–ª—è –±–∞—Ç—á–∞ {i//batch_size + 1}")
            else:
                print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è URL –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞: {response.status_code} - {response.text}")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            time.sleep(0.5)
        
        return all_export_urls
    
    def download_svg(self, url, filename, output_dir):
        """
        –°–∫–∞—á–∏–≤–∞–µ—Ç SVG —Ñ–∞–π–ª –ø–æ URL
        
        Args:
            url (str): URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            filename (str): –ò–º—è —Ñ–∞–π–ª–∞
            output_dir (str): –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        """
        if not url:
            print(f"–ü—É—Å—Ç–æ–π URL –¥–ª—è {filename}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return False
            
        try:
            response = requests.get(url)
            if response.status_code == 200:
                # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                Path(output_dir).mkdir(parents=True, exist_ok=True)
                
                # –û—á–∏—â–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
                safe_filename = re.sub(r'[<>:"/\\|?*]', '_', filename)
                if not safe_filename.endswith('.svg'):
                    safe_filename += '.svg'
                
                filepath = os.path.join(output_dir, safe_filename)
                
                with open(filepath, 'wb') as f:
                    f.write(response.content)
                
                print(f"‚úì –°–∫–∞—á–∞–Ω: {safe_filename}")
                return True
            else:
                print(f"‚úó –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è {filename}: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ {filename}: {e}")
            return False
    
    def download_all_svgs(self, figma_url, output_dir="figma_svgs"):
        """
        –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤—Å–µ—Ö SVG –∏–∑ –¥–∏–∑–∞–π–Ω–∞ Figma
        
        Args:
            figma_url (str): URL –¥–∏–∑–∞–π–Ω–∞ Figma
            output_dir (str): –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        """
        try:
            print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ SVG –∏–∑ Figma...")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º file key
            file_key = self.extract_file_key(figma_url)
            print(f"üìÅ File key: {file_key}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            print("üìã –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞...")
            file_info = self.get_file_info(file_key)
            
            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã–µ —É–∑–ª—ã
            all_nodes = []
            node_name_map = {}
            
            for page in file_info["document"]["children"]:
                print(f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É: {page.get('name', 'Unnamed')}")
                page_nodes = self.find_all_nodes(page)
                all_nodes.extend(page_nodes)
                
                # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É ID -> –∏–º—è
                for node in page_nodes:
                    node_name_map[node["id"]] = node["name"]
            
            print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(all_nodes)} —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã—Ö —É–∑–ª–æ–≤")
            
            if not all_nodes:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —É–∑–ª–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
            print("üîó –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞...")
            node_ids = [node["id"] for node in all_nodes]
            export_urls = self.get_export_urls(file_key, node_ids, "svg")
            
            print(f"üì• –ü–æ–ª—É—á–µ–Ω—ã URL –¥–ª—è {len(export_urls)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –≤—Å–µ SVG
            print("‚¨áÔ∏è –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ SVG —Ñ–∞–π–ª–æ–≤...")
            success_count = 0
            
            for node_id, url in export_urls.items():
                node_name = node_name_map.get(node_id, f"node_{node_id}")
                success = self.download_svg(url, node_name, output_dir)
                if success:
                    success_count += 1
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è–º–∏
                time.sleep(0.2)
            
            print(f"\n‚úÖ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            print(f"üìä –£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ: {success_count} –∏–∑ {len(export_urls)} —Ñ–∞–π–ª–æ–≤")
            print(f"üìÇ –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {os.path.abspath(output_dir)}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞
    """
    print("=== Figma SVG Downloader ===")
    print()
    
    # URL –≤–∞—à–µ–≥–æ –¥–∏–∑–∞–π–Ω–∞
    figma_url = "https://www.figma.com/design/IQgPIHYpGnotfOrtwPijJU/Terra-Vino?node-id=2035-4862&t=4mU0z4d1Yk6zYwRg-0"
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞
    access_token = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Figma Access Token: ").strip()
    
    if not access_token:
        print("‚ùå –¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        print()
        print("–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:")
        print("1. –û—Ç–∫—Ä–æ–π—Ç–µ https://www.figma.com/")
        print("2. –í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç")
        print("3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Settings > Personal Access Tokens")
        print("4. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫
    downloader = FigmaSVGDownloader(access_token)
    
    # –°–∫–∞—á–∏–≤–∞–µ–º –≤—Å–µ SVG
    downloader.download_all_svgs(figma_url, "terra_vino_svgs")


if __name__ == "__main__":
    main()